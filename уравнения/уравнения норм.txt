#include <iostream>
#include <cctype>
#include <stdlib.h>
#include <conio.h>
#include <cstdio>
#include <iomanip>
#include <stack>
#include<cstring>
#include<math.h>
#include <windows.h> 
#include<algorithm>
using namespace std;
int prior(char v)
{
	switch (v)
	{
	case '(': return 1;
	case '+':
	case '-': return 2;
	case '*':
	case '/': return 3;
	case'^': return 4;
	}
}
bool is_op(char c)
{
	return c == '+' || c == '-' || c == '*' || c == '/' || c == '^';
}
bool is_digit(char c)
{
	return c >= '0' && c <= '9';
}
void coefficient_C(char*a, char *b)
{
	int i = 0;
	while (a[i] != '=')
	{
		if (is_digit(a[i]) || is_op(a[i]) || a[i] == '(' || a[i] == ')')
		{
			b[i] = a[i];
		}
		else
			if (a[i] == 'x')
				b[i] = '0';
		i++;
	}
}
void coefficient_A(char*a, char*d, int k)
{
	int i = 0;
	while (a[i] != '=')
	{
		if (is_digit(a[i]) || is_op(a[i]) || a[i] == '(' || a[i] == ')')
		{
			d[i] = a[i];
		}
		else
		{
			switch (k)
			{
			case 1:
			{
				if (a[i] == 'x'&&a[i + 1] != '^')
					d[i] = '0';
				if (a[i] == 'x'&&a[i + 1] == '^'&&a[i + 2] == '2')
					d[i] = '1';
				break;
			}
			case 2:
			{
				if (a[i] == 'x'&&a[i + 1] == '^'&&a[i + 2] == '2')
					d[i] = '0';
				if (a[i] == 'x'&&a[i + 1] == '^'&&a[i + 2] == '4')
					d[i] = '1';
				break;
			}
			}
		}
		i++;
	}
}
void coefficient_B(char*a, char*c, int k)
{
	int i = 0;
	while (a[i] != '=')
	{
		if (is_digit(a[i]) || is_op(a[i]) || a[i] == '(' || a[i] == ')')
		{
			c[i] = a[i];
		}
		else
		{
			switch (k)
			{
			case 1:
			{
				if (a[i] == 'x'&&a[i + 1] != '^')
					c[i] = '1';
				if (a[i] == 'x'&&a[i + 1] == '^'&&a[i + 2] == '2')
					c[i] = '0';
				break;
			}
			case 2:
			{
				if (a[i] == 'x'&&a[i + 1] == '^'&&a[i + 2] == '2')
					c[i] = '1';
				if (a[i] == 'x'&&a[i + 1] == '^'&&a[i + 2] == '4')
					c[i] = '0';
				break;
			}
			}
		}
		i++;
	}
}
char* OPN(char *a, char *out)
{
	//out = 0;
	stack <char> S;
	char*c = 0;
	int i = 0, j = 0;
	int y = 0;
	for (; a[i] != '\0'; ++i)
	{
		if (j == 0 && a[0] == '-' )
		{
			out[j] = '0';
			++j;
			out[j] = '_';
			S.push(a[i]);
			++j;
			++i;
		}
		if (is_digit(a[i]))
		{
			out[j] = a[i];
			++j;
		}
		else
		{
			if (j != 0 && out[j - 1] >= '0' && out[j - 1] <= '9' )
			{
				out[j] = '_';
				++j;
			}
			if (is_op(a[i]))
			{
					if (S.empty() || prior(S.top()) < prior(a[i]))
					{
						S.push(a[i]);
				}
				else
				{
					while (!S.empty() && (prior(S.top()) >= prior(a[i])))
					{
						out[j++] = S.top();
						S.pop();
					}
					S.push(a[i]);
				}
			}
			else
			{
				if (a[i] == '(')
				{
					S.push(a[i]);
				}
				else
				{
					if (a[i] == ')')
					{
						if (S.empty() || S.top() == '(')
						{
							cout << "Input error!";
							_getch();
							exit(1);
						}
						else
						{
							while (S.top() != '(')
							{
								out[j] = S.top();
								S.pop();
								j++;
							}
						}
						S.pop();
					}
				}
			}
		}
	}
	while (!S.empty())
	{
		if (S.top() == '(')
		{
			cout << "Input error!";
			_getch(); exit(1);
		}
		else
		{
			out[j] = S.top();
			S.pop();
			j++;
		}
	}
	return out;
}
int Calc(char *out)
{
	int j = 0, c = 0, r1 = 0, r2 = 0,k=0,z=0;
	stack <double> S;
	//stack <double> S1;
	char num[16];
	char* pEnd = nullptr;
	while (out[j] != '\0')
	{
		if (out[j] == '_') {
			++j;
			continue;
		}
		if (out[j] >= '0' && out[j] <= '9')
		{
			long iNum = strtol(&out[j], &pEnd, 10);
			S.push(iNum);
			j += pEnd - &out[j];
		}
		else
		{
			if (is_op(out[j]))
			{
				r1 = S.top(); S.pop();
				r2 = S.top(); S.pop();
				switch (out[j])
				{
				case '+': S.push(r2 + r1); break;
				case '-': S.push(r2 - r1); break;
				case '*': S.push(r2*r1); break;
				case '/': S.push(r2 / r1); break;
				case '^': S.push(pow(r2, r1)); break;
				}
			}
			++j;
		}
	}
	return (S.top());
}
int Tochka_y(int x, int k, char*a)
{
	int i = 0, j = 0,n=0,minus=0,schet=0,h=x,l=0;
	char *m = new char[100]{ 0 };
	char *p = new char[100]{ 0 };
	char *chislo =new char[100] { 0 };
	char *copy = new char[100]{ 0 };
	if (x == 0)
	{
		chislo[i] = '0';
		l = 1;
	}
	while (x != 0)
	{
		if(x>0)
		n = x % 10;
		else
		{
			n = -(x % 10);
			minus = 1;
		}
		copy[j] = char(n)+'0';
		x = x / 10;
		j++;
	}
	if (minus == 0)
		copy[j ] = '\0';
	else
	{
		copy[j] = '-';
		j++;
	}
	copy[j] = '\0';
	while (j-1>=0)
	{
		chislo[i] = copy[j-1];
		j--;
		i++;
	}
	chislo[i + 1] = '\0';
	i = 0;
	while (a[i] != '=')
	{
		if (is_digit(a[i]) || is_op(a[i]) || a[i] == '(' || a[i] == ')')
		{
			p[schet] = a[i];
		}
		else
			if (a[i] == 'x'&&a[i+1]=='^'&&(a[i+2]=='2'||a[i+2]=='4') && l==0)
			{
				j = 0;
				while (chislo[j] != '\0')
				{
					if (chislo[j] != '-')
					{
						p[schet] = chislo[j];
						++j;
						schet++;
					}
					else
					{
						//p[schet] ='_';
						++j;
						//schet++;
					}
				}
				schet--;
				j = 0;
			}
			else
				if (a[i] == 'x'&&a[i + 1] != '^'&&l == 0)
				{
					int mnoshitel = 0;
					j = 0;
					while (chislo[j] != '\0')
					{
						if (chislo[j] != '-')
						{
							p[schet] = chislo[j];
							++j;
							schet++;
						}
						else
						{
							mnoshitel = 1;
							p[schet] = '_';
							++j;
							schet++;
						}
					}
					schet--;
					j++;
					if (mnoshitel == 1)
					{
						int Smena = 0;
						for (int k = schet; k >= 0; k--)
						{
							if (p[k] == '+' && Smena!=1)
							{
								p[k] = '-';
								break;
							}
							if (p[k] == '-'&&Smena != 1)
							{
								p[k] = '+';
								break;
							}
							if (p[k] == ')')
							{
								Smena = 1;
							}
							if (p[k] == '(')
							{
								Smena = 2;
							}
						}
					}
				}
			else
			{
				if (l == 1)
				{
					p[schet] = chislo[j];
					++j;
					l = 0;
					j = 0;
				}
			}
		i++;
		schet++;
	}
	OPN(p, m);
	int c = Calc(m);
	return c;
}
void gotoxy(int xpos, int ypos)
{
	COORD scrn;
	HANDLE hOuput = GetStdHandle(STD_OUTPUT_HANDLE);
	scrn.X = xpos; scrn.Y = ypos;
	SetConsoleCursorPosition(hOuput, scrn);
}
float SizeY(int s)
{
	float k = 0;
	if (s > 20 && s <= 200 || s < -20 && s >= -200)
		k = 0.1;
	else if (s >= 2 && s<= 20 || s <= -2 && s>=-20)
		k = 1;
					else if (s < 2 && s > -2)
						k = 10;
					else if (s > 200 && s <= 2000 || s <= -200 && s > -2000)
						k = 0.01;
					else if (s > 2000 && s <= 20000 || s <= -2000 && s > -20000)
						k = 0.001;
	return k;
}
float SizeX(int s)
{
	float k = 0;
	if (s > 28 && s <= 280 || s < -28 && s >= -280)
		k = 0.1;
	else if (s >= 3 && s <= 28 || s <= -3 && s >= -28)
		k = 1;
	else if (s < 3 && s > -3)
		k = 10;
	else if (s > 280 && s <= 2800 || s <= -280 && s > -2800)
		k = 0.01;
	else
		if ((s > 2800 && s <= 28000) || (s <= -2800 && s >= -28000))
			k = 0.001;
	return k;
}
void Graphic(char*a,float A, float B, float C, float x1, float x2, float x3, float x4,int k)
{
		float kx = 1;
		float ky = 1;
		int i = 30;
		int j = 0;
		float c = 0;
		float d = 0;
		int s1 = 0, s2 = 0,w=0,l=0,w1=0,w2=0;
		int g = 5, schet1 = 0, schet2 = 0;
		int x = 0;
	gotoxy(i, j);
	gotoxy(i, j);
	while (i < 90)
	{
		gotoxy(i, 20);
		cout << "���";
		i++;
	}
	while (j < 40)
	{
		gotoxy(60, j);
		cout << "|";
		j++;
	}
	if (k == 1)
	{	
			c = -(B / (2 * A));
			d = -(B * B - 4 * A*C) / (4 * A);
			if (x1 == -10000000 && x2 == -10000000)
			{
				s1= Tochka_y(int(c) + g+1, k, a);
				//s2 = Tochka_y(int(c) - g, k, a);
				if (abs(s1) >= abs(d))
					ky = SizeY(s1);
				else
					ky = SizeY(d);
				s2 = Tochka_y(int(c) + g , k, a);
				gotoxy(60 + kx * round(c+ g), 20 - ky * s2);
				cout << "*";
				gotoxy(60 + kx * round(c -g), 20 - ky * s2);
				cout << "*";
				gotoxy(60 + kx *int(c), 20 - ky * d);
				cout << "*";
				gotoxy(60 + kx * round(c+g+1), 20 - ky * s1);
				cout << "*";
				gotoxy(60 + kx * round(c - g - 1), 20 - ky * s1);
				cout << "*";
			}
			if (x1 !=-10000000 && x2 == -10000000)
			{
				s1 = Tochka_y(x1+g, k, a);
				s2 = Tochka_y(x1 - g, k, a);
				if (abs(s1) >= abs(d))
					ky = SizeY(s1);
				else
					ky = SizeY(d);
					kx = SizeX(x1);
					gotoxy(60 + kx * x1, 20);
					cout << "*";
				gotoxy(60 + kx * (x1+g), 20 - ky * s1);
				cout << "*";
				gotoxy(60 + kx * (x1-g), 20 - ky * s2);
				cout << "*";
				gotoxy(60 + kx * c, 20 - round(ky * d));
				cout << "*";
			}
			if ((x1 >= x2)&&x2!=-10000000)
			{
				s1 = Tochka_y(x1 + g, k, a);
				s2 = Tochka_y(x2 - g, k, a);
				if (abs(s1) >= abs(d))
					ky = SizeY(s1);
				else
					ky = SizeY(d);
				if (abs(x1) >= abs(x2))
					kx = SizeX(x1);
				else
					kx = SizeX(x2);
				gotoxy(60 + kx * x1, 20);
				cout << "*";
				gotoxy(60 + kx * x2, 20);
				cout << "*";
				gotoxy(60 + kx * (x1 + 3), 20 - round(ky * s1));
				cout << '*';
				gotoxy(60 + kx * (x2 - 3), 20 - round(ky * s1));
				cout << '*';
				gotoxy(60 + kx * c, 20 - round(ky * d));
				cout << "*";
			}
			else
			{
				if ((x1 < x2) && x2!=-10000000)
				{
					s2 = Tochka_y(x2 + g, k, a);
					s1 = Tochka_y(x1 - g, k, a);
					if (abs(s1) >= abs(d))
						ky = SizeY(s1);
					else
						ky = SizeY(d);
					if (abs(x1) >= abs(x2))
						kx = SizeX(x1);
					else
						kx = SizeX(x2);
					gotoxy(60 + kx * x1, 20);
					cout << "*";
					gotoxy(60 + kx * x2, 20);
					cout << "*";
					gotoxy(60 + kx * (x1 - 3), 20 - ky * s2);
					cout << '*';
					gotoxy(60 + kx * (x2 + 3), 20 - ky * s2);
					cout << '*';
					gotoxy(60 + round(kx * c), 20 - round(ky * d));
					cout << "*";
				}
			}
	}
	else
		if (k == 2)
		{
			//c = -(B / (2 * A));
			//d = -(B * B - 4 * A*C) / (4 * A);
			if (x3 != -10000000 && x4 != -10000000)
			{
				if (abs(x1) >= abs(x2))
					kx = SizeX(x1);
				else
					kx = SizeX(x2);
				gotoxy(60 + kx*x1, 20);
				cout << "*";
				gotoxy(60 + kx*x2, 20);
				cout << "*";
				gotoxy(60 + kx*x3, 20);
				cout << "*";
				gotoxy(60 + kx*x4, 20);
				cout << "*";
				if (x1 < x3)
				{
					s1 = Tochka_y(x3 - x1, k, a);
					ky = SizeY(s1);
					gotoxy(60 + kx*(x3+(x3-x1)/2), 20 - ky*s1);
					cout << '*';
				}
				else
				{
					s1 = Tochka_y(x1 - x3, k, a);
					ky = SizeY(s1);
					gotoxy(60 + kx*round(x1+(x1 - x3)/2), 20 - ky*s1);
					cout << '*';
				}
				if (x2 < x4)
				{
					gotoxy(60 + kx*(x2+(x2 - x4)/2), 20 - ky*s1);
					cout << '*';
				}
				else
				{
					gotoxy(60 + kx*(x4+(x4 - x2)/2), 20 - ky*s1);
					cout << '*';
				}
				s1= Tochka_y(0, k, a);
				gotoxy(60 , 20 - ky * s1);
				cout << "*";
				
			}
			if (x1!=-10000000 && x2!=-10000000 && (x3 == 0 || x4 == 0))
			{
				if (abs(x1) >= abs(x2))
					kx = SizeX(x1);
				else
					kx = SizeX(x2);
				s1 = Tochka_y(round(x1 / 2), k, a);
				ky = SizeY(s1);
				gotoxy(60 + kx*x1, 20);
				cout << "*";
				gotoxy(60 + kx*x2, 20);
				cout << "*";
				gotoxy(60 , 20);
				cout << "*";
				gotoxy(60+kx*x1/2, 20-ky*s1);
				cout << '*';
				s2 = Tochka_y((x1/2+2), k, a);
				gotoxy(60 + kx*x2/2, 20 - ky*s1);
				cout << '*';
				gotoxy(60 + kx * (x1 /2+2), 20 + ky * s1);
				cout << '*';
				gotoxy(60 + kx * (x2 / 2 - 2), 20 + ky * s1);
				cout << '*';
			}
			if (x1!=-10000000 && x2!=-10000000 && x3 == -10000000 && x4 == -10000000)
			{
				if (abs(round(x1)+g) >= abs(round(x2)+g))
					kx = SizeX(round(x1)+2);
				else
					kx = SizeX(round(x2)+2);
				gotoxy(60 + kx*round(x1), 20);
				cout << "*";
				gotoxy(60 + kx*round(x2), 20);
				cout << "*";
				if (x1 >= x2)
				{
					s1 = Tochka_y(round(x1) + 2, k, a);
					s2 = Tochka_y(0, k, a);
					ky = SizeY(s1);
					gotoxy(60 + kx*(int(x1) + 2), 20 - ky*s1);
					cout << '*';
					gotoxy(60 + kx*(int(x2) - 2), 20 - ky*s1);
					cout << '*';
					gotoxy(60, 20 - round(ky *s2));
					cout << "*";
				}
				else
				{
					s1 = Tochka_y(x2 + 2, k, a);
					s2 = Tochka_y(0, k, a);
					ky = SizeY(s1);
					gotoxy(60 + round(x2) + 2, 20 - ky * s1);
					cout << '*';
					gotoxy(60 + round(x1) - 2, 20 - ky * s1);
					cout << '*';
					gotoxy(60, 20 - round(ky * s2));
					cout << "*";
				}
			}
			if (x1 == -10000000 && x2 == -10000000)
			{
				s1 = Tochka_y(0, k, a);
				x = s1;
				for (l = 1; l < 10; ++l)
				{
					s2= Tochka_y(l, k, a);
					if (s2 < x)
					{
						w = l;
						x = s2;
						w1 = l;
					}
					else
						break;
				}
				for (l = 1; l <= 10; ++l)
				{
					s2 = Tochka_y(l, k, a);
					if (s2 > x)
					{
						w = l;
						x = s2;
						w2 = l;
					}
					else
						break;
				}
				int s3= Tochka_y(2, k, a);
				//int s4 = Tochka_y(-2, k, a);
				kx = SizeX(w);
				ky = SizeY(s3);
				if (x > 0 && w1!=10 && w2!=10)
				{
					gotoxy(60 + kx*w, 20 - round(ky * x));
					cout << "*";
					gotoxy(60 - kx*w, 20 - round(ky * x));
					cout << "*";
				}
				//s1 = Tochka_y(0, k, a);
				gotoxy(60, 20 - round(ky * s1));
				cout << "*";
				gotoxy(60+kx*(w+2), 20 - round(ky * s3));
				cout << "*";
				gotoxy(60+kx*(-w-2), 20 - round(ky * s3));
				cout << "*";
			}
			//if (x1 == 0 && x2 == 0)
			//{

			///}
		}
}
void decision(char*a,int A, int B, int C, int k)
{
	float D = 0;
	float x1 = -10000000, x2 = -10000000, x3 = -10000000, x4 = -10000000;
	float t1 = -1, t2 = -1;
	if (A == 0 && k == 1)
	{
		cout << "� ���������� ���������� �������� ��������� ��������� ���������� �� ����������!" << endl;
	}
	if (k == 1 && A!=0)
	{
		D = B * B - 4 * A*C;
		if (D > 0)
		{
			x1 = (-B + sqrt(D)) / (2 * A);
			x2 = (-B - sqrt(D)) / (2 * A);
			cout << x1 << endl;
			cout << x2 << endl;
			Graphic(a,A, B, C, x1, x2,x3,x4,k);
		}
		else
			if (D == 0)
			{
				x1 = -B / (2 * A);
				cout << x1 << endl;
				Graphic(a,A, B, C, x1, x2, x3, x4,k);
			}
			else
				if (D < 0)
				{
					cout << "��� �������";
					Graphic(a, A, B, C, x1, x2, x3, x4, k);
				}
	}
	if (k == 2)
	{
		D = B * B - 4 * A*C;
		if (D > 0)
		{
			t1 = (-B + sqrt(D)) / (2 * A);
			t2 = (-B - sqrt(D)) / (2 * A);
		}
		else
			if (D == 0)
				t1 = -B / (2 * A);
			else
				if (D < 0)
					cout << "��� �������";
		if (t1 >0 && t2>0 && t1 != t2)
		{
			x1 = sqrt(t1);
			x2 = -sqrt(t1);
			x3 = sqrt(t2);
			x4 = -sqrt(t2);
			cout << x1 << endl;
			cout << x2 << endl;
			cout << x3 << endl;
			cout << x4 << endl;
			Graphic(a,A, B, C, x1, x2, x3, x4,k);
		}
		if ((t1 >= 0 && t2 < 0) || (t2 >= 0 && t1 < 0))
		{
			x1 = sqrt(t1);
			x2 = -sqrt(t1);
			cout << x1 << endl;
			cout << x2 << endl;
			Graphic(a, A, B, C, x1, x2, x3, x4, k);
		}
		if (t1 == t2 && t1 >= 0)
		{
			x1 = sqrt(t1);
			x2 = -sqrt(t1);
			cout << x1 << endl;
			cout << x2 << endl;
			Graphic(a,A, B, C, x1, x2, x3, x4,k);
		}
		if ((t1 >=0 && (t2==0||t2==-0))|| (t2 >= 0 && (t1 == 0 || t1 == -0)))
		{
			if (t1 >= 0 && (t2 == 0 || t2 == -0))
			{
				x1 = sqrt(t1);
				x2 = -sqrt(t1);
				x3 = 0;
			}
			else
				if (t2 >= 0 && (t1 == 0 || t1 == -0))
				{
					x1 = sqrt(t2);
					x2 = -sqrt(t2);
					x3 = 0;
				}
			cout << x1 << endl;
			cout << x2 << endl;
			cout << x3 << endl;
			Graphic(a, A, B, C, x1, x2, x3, x4, k);
		}
		if (t1 < 0 && t2 < 0)
			Graphic(a, A, B, C, x1, x2, x3, x4, k);
			//cout << "��� �������";
	}
}
int main()
{
	setlocale(0, "");
	char a[100] = { 0 };
	char out[100] = { 0 };
	char b[100] = { 0 };
	char c[100] = { 0 };
	char d[100] = { 0 };
	char e[100] = { 0 };
	char* f = new char[100]{ 0 };
	stack <char> S;
	int i = 0, k = 0,flag=0,flag1=0,flag2=0;
	int A = 0, B = 0, C = 0;
	cout << "������� ���������� ��� ������������ ��������� ������ 0" << endl;
	cout << "��������: 3*x^2+4*(x-3*(2+1)+2*x^2)+8=0"<<endl;
	//cout << "����� ������ ���� ������";
	while (true)
	{
		gets_s(a);
		while (a[i + 2] != '0' && i < strlen(a))
		{
			if (((a[i] == 'x'&&a[i + 1] != '^') || (a[i] == 'x'&&a[i + 1] == '^' && a[i + 2] == '2')) && k != 2)
				k = 1;
			else
				if (((a[i] == 'x'&&a[i + 1] == '^'&&a[i + 2] == '4') || (a[i] == 'x'&&a[i + 1] == '^' && a[i + 2] == '2')) && k != 1)
					k = 2;
			if (is_op(a[i]) && is_op(a[i + 1]))
			{
				flag = 1;
				flag1 = i;
			}
			if (is_op(a[i]) || prior(a[i]) || is_digit(a[i]) || a[i] == 'x')
			{ }
			else
			{
				flag2 = 1;
				flag1 = i;
			}
				i++;
		}
		if (a[i + 2] != '0'|| flag==1 || flag==2)
		{
			if (flag == 1 || flag2 == 1)
			{
				cout << "������!"<<endl<<"������� ���������� ��� ������������ ��������� ������ 0" << endl;
				system("pause");
				system("cls");
			}
			else
			{
				cout << "������!������� ���������� ��� ������������ ��������� ������ 0" << endl;
				system("pause");
				system("cls");
			}
	}
		else
			break;
	}
	coefficient_C(a, b);
	OPN(b, out);
	C = Calc(out);
	coefficient_A(a, d, k);
	OPN(d, e);
	A = Calc(e) - C;
	coefficient_B(a, c, k);
	OPN(c, f);
	B = Calc(f) - C;
	decision(a,A, B, C, k);
	gotoxy(0, 40);
	system("pause");
	return 0;
}
